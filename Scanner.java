/* The following code was generated by JFlex 1.6.1 */

import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexical.flex</tt>
 */
class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\35"+
    "\1\44\3\0\1\37\1\43\1\40\1\40\1\5\1\32\1\40\1\32"+
    "\1\41\1\4\12\7\1\0\1\40\1\33\1\34\1\33\2\0\4\6"+
    "\1\42\25\6\1\40\1\45\1\40\1\0\1\6\1\0\1\14\1\10"+
    "\1\20\1\27\1\13\1\25\1\6\1\31\1\22\1\6\1\17\1\12"+
    "\1\6\1\15\1\11\2\6\1\16\1\24\1\21\1\23\1\26\1\30"+
    "\3\6\1\40\1\36\1\40\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\2\3\1\4\1\5\11\4\1\6"+
    "\1\7\1\10\2\1\1\11\1\1\1\12\1\13\2\14"+
    "\1\15\1\1\1\16\2\0\1\17\7\4\1\20\5\4"+
    "\1\6\1\21\1\10\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\2\16\1\0\1\17\1\0\16\4"+
    "\1\32\4\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[83];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\114\0\230\0\114\0\276"+
    "\0\344\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee"+
    "\0\u0214\0\u023a\0\u0260\0\u0286\0\u0286\0\u02ac\0\u02d2\0\114"+
    "\0\u02f8\0\114\0\u031e\0\u0344\0\114\0\114\0\u036a\0\u0390"+
    "\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474\0\u049a\0\u04c0"+
    "\0\u04e6\0\u050c\0\276\0\u0532\0\u0558\0\u057e\0\u05a4\0\u05ca"+
    "\0\114\0\114\0\114\0\114\0\114\0\114\0\114\0\114"+
    "\0\114\0\114\0\114\0\u05f0\0\114\0\u0616\0\u063c\0\u063c"+
    "\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c"+
    "\0\u0792\0\u07b8\0\u07de\0\u0804\0\u082a\0\u0850\0\276\0\u0876"+
    "\0\u089c\0\u08c2\0\u08e8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[83];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\2\10\1\13\2\10\1\14\1\10\1\15\1\16\1\17"+
    "\2\10\1\20\1\21\1\10\1\22\1\10\1\7\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\10\1\3"+
    "\1\32\1\3\1\33\1\34\1\35\41\33\1\36\1\37"+
    "\50\0\1\5\47\0\1\40\1\41\46\0\24\10\10\0"+
    "\1\10\12\0\1\11\3\0\1\42\25\0\1\43\1\42"+
    "\11\0\3\10\1\44\4\10\1\45\13\10\10\0\1\10"+
    "\11\0\4\10\1\46\17\10\10\0\1\10\11\0\5\10"+
    "\1\47\16\10\10\0\1\10\11\0\3\10\1\50\20\10"+
    "\10\0\1\10\11\0\10\10\1\51\13\10\10\0\1\10"+
    "\11\0\7\10\1\52\7\10\1\53\4\10\10\0\1\10"+
    "\11\0\3\10\1\54\1\55\1\10\1\56\15\10\10\0"+
    "\1\10\11\0\3\10\1\57\20\10\10\0\1\10\11\0"+
    "\23\10\1\60\10\0\1\10\37\0\1\61\45\0\1\62"+
    "\47\0\1\63\46\0\1\63\15\0\1\43\36\0\1\33"+
    "\2\0\41\33\4\0\1\35\53\0\1\64\4\0\1\65"+
    "\1\66\2\0\1\67\3\0\1\70\15\0\1\71\1\72"+
    "\1\73\1\40\1\74\1\75\43\40\5\41\1\76\40\41"+
    "\7\0\1\77\22\0\1\100\22\0\1\43\3\0\1\42"+
    "\26\0\1\42\11\0\3\10\1\101\20\10\10\0\1\10"+
    "\11\0\5\10\1\102\16\10\10\0\1\10\11\0\16\10"+
    "\1\103\5\10\10\0\1\10\11\0\13\10\1\104\10\10"+
    "\10\0\1\10\11\0\7\10\1\105\14\10\10\0\1\10"+
    "\11\0\15\10\1\106\6\10\10\0\1\10\11\0\13\10"+
    "\1\53\10\10\10\0\1\10\11\0\10\10\1\53\13\10"+
    "\10\0\1\10\11\0\3\10\1\107\20\10\10\0\1\10"+
    "\11\0\4\10\1\110\17\10\10\0\1\10\11\0\14\10"+
    "\1\111\7\10\10\0\1\10\11\0\14\10\1\112\7\10"+
    "\10\0\1\10\5\0\1\75\43\0\4\41\1\75\1\76"+
    "\40\41\7\0\1\77\44\0\4\10\1\113\17\10\10\0"+
    "\1\10\11\0\6\10\1\114\15\10\10\0\1\10\11\0"+
    "\5\10\1\53\16\10\10\0\1\10\11\0\15\10\1\115"+
    "\6\10\10\0\1\10\11\0\13\10\1\116\10\10\10\0"+
    "\1\10\11\0\5\10\1\117\16\10\10\0\1\10\11\0"+
    "\6\10\1\52\15\10\10\0\1\10\11\0\16\10\1\106"+
    "\5\10\10\0\1\10\11\0\21\10\1\53\2\10\10\0"+
    "\1\10\11\0\4\10\1\103\17\10\10\0\1\10\11\0"+
    "\5\10\1\120\16\10\10\0\1\10\11\0\11\10\1\53"+
    "\12\10\10\0\1\10\11\0\10\10\1\121\13\10\10\0"+
    "\1\10\11\0\14\10\1\122\7\10\10\0\1\10\11\0"+
    "\6\10\1\121\15\10\10\0\1\10\11\0\7\10\1\53"+
    "\14\10\10\0\1\10\11\0\7\10\1\123\14\10\10\0"+
    "\1\10\11\0\15\10\1\103\6\10\10\0\1\10\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2318];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\20\1\1\11"+
    "\1\1\1\11\2\1\2\11\2\1\2\0\16\1\13\11"+
    "\1\1\1\11\1\0\1\1\1\0\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[83];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();

  public static File file = new File("output/output.txt");

  public static void WriteToFile(String tokenType, String token) {
      try {
          FileWriter fr = new FileWriter(file, true);
          fr.write(tokenType + token.trim() + "\n");
          fr.close();
      } catch (IOException e) {
          e.printStackTrace();
      }
  }
  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { WriteToFile( "Error: Unknow token" , yytext());
            }
          case 27: break;
          case 2: 
            { /* ignore */
            }
          case 28: break;
          case 3: 
            { WriteToFile( "ArithmeticOperators: " , yytext());
            }
          case 29: break;
          case 4: 
            { WriteToFile( "Identifiers: " , yytext());
            }
          case 30: break;
          case 5: 
            { WriteToFile( "Integers: " , yytext());
            }
          case 31: break;
          case 6: 
            { WriteToFile( "RelationalOperators: " , yytext());
            }
          case 32: break;
          case 7: 
            { WriteToFile( "AssignmentOperator: " , yytext());
            }
          case 33: break;
          case 8: 
            { WriteToFile( "LogicalOperators: " , yytext());
            }
          case 34: break;
          case 9: 
            { WriteToFile( "Separators: " , yytext());
            }
          case 35: break;
          case 10: 
            { yybegin(STRING); string.setLength(0);
            }
          case 36: break;
          case 11: 
            { string.append( yytext() );
            }
          case 37: break;
          case 12: 
            { WriteToFile( "Unterminated String" , yytext());
            }
          case 38: break;
          case 13: 
            { yybegin(YYINITIAL); 
   WriteToFile( "String:" , yytext());
            }
          case 39: break;
          case 14: 
            { WriteToFile( "Comments: " , yytext());
            }
          case 40: break;
          case 15: 
            { WriteToFile( "Floats: " , yytext());
            }
          case 41: break;
          case 16: 
            { WriteToFile( "Keyword: " , yytext());
            }
          case 42: break;
          case 17: 
            { WriteToFile( "EqualityOperators: " , yytext());
            }
          case 43: break;
          case 18: 
            { string.append( '\b' );
            }
          case 44: break;
          case 19: 
            { string.append( '\n' );
            }
          case 45: break;
          case 20: 
            { string.append( '\r' );
            }
          case 46: break;
          case 21: 
            { string.append( '\t' );
            }
          case 47: break;
          case 22: 
            { string.append( '\f' );
            }
          case 48: break;
          case 23: 
            { string.append( '\'' );
            }
          case 49: break;
          case 24: 
            { string.append( '\"' );
            }
          case 50: break;
          case 25: 
            { string.append( '\\' );
            }
          case 51: break;
          case 26: 
            { WriteToFile( "Booleans: " , yytext());
            }
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
